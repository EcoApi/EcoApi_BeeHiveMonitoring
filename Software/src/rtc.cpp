/************************************************************************************//**
 *
 *	\file		rtc.cpp
 *
 *	\brief
 *
 *	\date		2 nov. 2021
 *
 *	\author		ecoapi
 *
 ***************************************************************************************/

/***************************************************************************************/
/*	Includes				
/***************************************************************************************/
#include "rtc.h"
#include "trace.h"

/***************************************************************************************/
/*	Defines		  	 	 															                                     
/***************************************************************************************/
#define MIN_TS 1678085707 // Monday 6 March 2023 06:55:07
#define MAX_TS 2208902400 // Saturday 31 December 2039 00:00:00

/***************************************************************************************/
/*	Local variables                                                                    
/***************************************************************************************/

/***************************************************************************************/
/*	Local Functions prototypes                                                         
/***************************************************************************************/
/************************************************************************************
 *
 *	\fn		bool rtc_isTsValid(time_t ts)
 *	\brief 
 *
 ***************************************************************************************/
bool rtc_isTsValid(time_t ts) {
  return (ts < MIN_TS || ts > MAX_TS) ? FALSE : TRUE;
}

/************************************************************************************
 *
 *	\fn		int32_t rtc_init(void)
 *	\brief 
 *
 ***************************************************************************************/
int32_t rtc_init(time_t *p_startTime) {
  if(p_startTime == NULL)
    return ERROR;
    
  if(OK != rtc_external_init(p_startTime))
    return -2;

  if(OK != rtc_internal_init())
    return -3;

  if(OK != rtc_internal_start(0))
    return -4;

  return OK;
}

/************************************************************************************
 *
 *	\fn		int32_t rtc_deinit(void)
 *	\brief 
 *
 ***************************************************************************************/
int32_t rtc_deinit(void) {
  if(OK != rtc_external_deinit())
    return ERROR;

  if(OK != rtc_internal_deinit())
    return ERROR;

  return OK;  
}

/************************************************************************************
 *
 *	\fn		time_t rtc_read(void) 
 *	\brief 
 *
 ***************************************************************************************/
time_t rtc_read(void) {
  return rtc_external_read();
}

/************************************************************************************
 *
 *	\fn		void rtc_write(time_t timestamp)
 *	\brief 
 *
 ***************************************************************************************/
int32_t rtc_write(time_t timestamp) {
  return rtc_external_write(timestamp);
}
 
/************************************************************************************
 *
 *	\fn		void rtc_enableWakeUpRtc(uint32_t u32_sleepTime)
 *	\brief 
 *
 ***************************************************************************************/
int32_t rtc_enableWakeUpRtc(uint32_t u32_sleepTime /* second */) {
  return rtc_external_enableWakeUpRtc(u32_sleepTime);
}

/************************************************************************************
 *
 *	\fn		void rtc_isEnabledWakeUpRtc()
 *	\brief 
 *
 ***************************************************************************************/
bool rtc_isEnabledWakeUpRtc(void) {
  return rtc_external_isEnabledWakeUpRtc();  
}

/************************************************************************************
 *
 *	\fn		int32_t rtc_isWakeUpRtc(void)
 *	\brief 
 *
 ***************************************************************************************/
bool rtc_isWakeUpRtc(void) {
  return rtc_external_isWakeUpRtc();
}

/************************************************************************************
 *
 *	\fn		void rtc_disableWakeUpTimer(void)
 *	\brief 
 *
 ***************************************************************************************/
int32_t rtc_disableWakeUpTimer(void) {
  rtc_external_disableWakeUpTimer();

  rtc_internal_disableWakeUpTimer();

  return OK;
}

/************************************************************************************
 *
 *	\fn		bool rtc_isLostPower(void)
 *	\brief 
 *
 ***************************************************************************************/
bool rtc_isLostPower(void) {
  return rtc_external_isLostPower();
}

